pipeline {
    agent any  // You can change 'any' to your preferred agent label or type

    stages {
        stage('Checkout') {
            steps {
                echo "Checkout stage: Passed"
                // Add your VCS checkout step if necessary
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'mvn clean package -f /path/to/your/pom.xml'  // Specify the path to your project's pom.xml file
            }
        }
        // Commenting out Static Code Analysis section
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://127.0.0.1:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
                DOCKERFILE_LOCATION = "Springapp-Pipeline/Dockerfile"
            }
            steps {
                script {
                    sh "cd Springapp-Pipeline && docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE_LOCATION} ."
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}
